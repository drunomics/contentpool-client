<?php

/**
 * @file
 * Install file.
 */

use Drupal\Core\Url;
use Drupal\user\Entity\Role;
use Drupal\workspace\Entity\Replication;

/**
 * Implements hook_requirements().
 */
function contentpool_client_requirements($phase) {
  if ($phase === 'runtime') {
    $requirements = [];
    /** @var \Drupal\contentpool_client\Service\ReplicationHelper $replication_helper */
    $replication_helper = \Drupal::service('contentpool_client.replication_helper');
    $replication = $replication_helper->getLastReplication();
    $upstream_workspace_pointer = $replication_helper->getUpstreamWorkspacePointer();
    $active_workspace_pointer = $replication_helper->getActiveWorkspacePointer();
    $title = t('Replication from <em>@source</em> to <em>@target</em>', [
      '@source' => $upstream_workspace_pointer->label(),
      '@target' => $active_workspace_pointer->label(),
    ]);
    $severity = REQUIREMENT_INFO;
    if ($replication) {
      /** @var \Drupal\Core\Datetime\DateFormatter $date_format */
      $date_format = \Drupal::service('date.formatter');
      // Attach the date the replication was triggered on.
      $description[] = [
        '#suffix' => '<br/>',
        '#markup' => t('Triggered on @datetime', ['@datetime' => $date_format->format($replication->changed->value, 'short')]),
      ];
      // Specially handle the case when there are conflicts.
      if ($conflicts = $replication_helper->hasConflicts($upstream_workspace_pointer, $active_workspace_pointer, TRUE)) {
        $status = t('<a href=":link" target="_blank">@count conflict(s)</a>', [
          ':link' => Url::fromRoute('entity.workspace.conflicts', [
            'workspace' => $active_workspace_pointer->getWorkspace()
              ->id(),
          ])->toString(),
          '@count' => $conflicts,
        ]);
        $severity = REQUIREMENT_ERROR;
      }
      else {
        switch ($replication->replication_status->value) {
          case Replication::FAILED:
            $status = t('Failed');
            $severity = REQUIREMENT_ERROR;
            break;

          case Replication::QUEUED:
            $status = t('Queued');
            break;

          case Replication::REPLICATING:
            $status = t('Replicating');
            break;

          case Replication::REPLICATED:
            $status = t('Replicated');
            break;

          default:
            $status = t('Unknown');
            break;
        }
      }
    }
    else {
      $status = t('Not yet reported');
    }
    $description[] = [
      '#markup' => t('Restart replication by following <strong><a href=":url">this</a></strong> link.', [
        ':url' => Url::fromRoute('contentpool_client.restart_replication')
          ->toString(),
      ]),
    ];
    $requirements['contentpool_client_replication'] = [
      'title' => $title,
      'value' => $status,
      'description' => $description,
      'severity' => $severity,
    ];
    return $requirements;
  }
}

/**
 * Install the contentpool client module.
 */
function contentpool_client_install() {
  // Extend the replicator role permissions as needed.
  $replicator = Role::load('replicator');
  $replicator->grantPermission('restful post contentpool_client:trigger_pull');
  $replicator->save();

  // Add vuejs settings.
  \Drupal::configFactory()->getEditable('vuejs.settings')
    ->set('libraries.vue.installation', 'cdnjs')
    ->set('libraries.vue.version', '2.5.17')
    ->save();
  // Configure custom entity edit redirect querystring.
  \Drupal::configFactory()->getEditable('entity_edit_redirect.settings')
    ->set('destination_querystring', 'trusted_destination')
    ->save();
}

/**
 * Add vuejs settings.
 */
function contentpool_client_update_8001() {
  \Drupal::configFactory()->getEditable('vuejs.settings')
    ->set('libraries.vue.installation', 'cdnjs')
    ->set('libraries.vue.version', '2.5.17')
    ->save();
}
