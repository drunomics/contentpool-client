<?php

/**
 * @file
 * Install file.
 */

use Drupal\Core\Url;
use Drupal\user\Entity\Role;
use Drupal\workspace\Entity\Replication;

/**
 * Implements hook_requirements().
 */
function contentpool_client_requirements($phase) {
  if ($phase === 'runtime') {
    $requirements = [];
    /** @var \Drupal\contentpool_client\ReplicationHelper $replication_helper */
    $replication_helper = \Drupal::service('contentpool_client.replication_helper');
    // Check if upstream workspace does exist.
    $upstream_workspace_pointer = $replication_helper->getUpstreamWorkspacePointer();
    if (!$upstream_workspace_pointer) {
      return [
        'contentpool_client_replication' => [
          'severity' => REQUIREMENT_ERROR,
          'title' => t('Contentpool replication'),
          'description' => t('No upstream workspace found to replicate from.'),
        ],
      ];
    }
    // Check if active (downstream) workspace does exist.
    $active_workspace_pointer = $replication_helper->getActiveWorkspacePointer();
    if (!$active_workspace_pointer) {
      return [
        'contentpool_client_replication' => [
          'severity' => REQUIREMENT_ERROR,
          'title' => t('Contentpool replication'),
          'description' => t('No active workspace found to replicate to.'),
        ],
      ];
    }
    $replication = $replication_helper->getLastReplication();
    // Prepare requirement.
    $requirement['severity'] = REQUIREMENT_INFO;
    $requirement['title'] = t('Contentpool replication');
    $requirement['description'][] = [
      '#markup' => t('Replication from <em>@source</em> to <em>@target</em>.', [
        '@source' => $upstream_workspace_pointer->label(),
        '@target' => $active_workspace_pointer->label(),
      ]),
    ];
    if ($replication) {
      /** @var \Drupal\Core\Datetime\DateFormatter $date_format */
      $date_format = \Drupal::service('date.formatter');
      // Attach the date the replication was triggered on.
      $requirement['value'][] = [
        '#suffix' => '<br/>',
        '#markup' => t('Last replication at @datetime', ['@datetime' => $date_format->format($replication->changed->value, 'short')]),
      ];

      if ($replication->replication_status->value == Replication::FAILED) {
        $requirement['severity'] = REQUIREMENT_ERROR;
      }

      $requirement['value'][] = [
        '#markup' => t('Last status: %status', ['%status' => $replication_helper->getLastReplicationStatusSummary($replication, FALSE)]),
      ];
      // Attach conflicts information if there are any.
      if ($conflicts = $replication_helper->hasConflicts($upstream_workspace_pointer, $active_workspace_pointer, TRUE)) {
        $requirement['value'][] = [
          '#markup' => ': ' . t('<a href=":link" target="_blank">@count conflict(s)</a>', [
            ':link' => Url::fromRoute('entity.workspace.conflicts', [
              'workspace' => $active_workspace_pointer->getWorkspace()
                ->id(),
            ])->toString(),
            '@count' => $conflicts,
          ]),
        ];
        $requirement['severity'] = REQUIREMENT_WARNING;
      }
    }
    else {
      $requirement['value'][] = [
        '#markup' => t('Not yet reported'),
      ];
    }
    $requirement['description'][] = [
      '#markup' => ' ' . t('Start over and reset the replication history by following <strong><a href=":url">this</a></strong> link.', [
        ':url' => Url::fromRoute('contentpool_client.reset_replication')->toString(),
      ]),
    ];
    $requirements['contentpool_client_replication'] = $requirement;
    return $requirements;
  }
}

/**
 * Install the contentpool client module.
 */
function contentpool_client_install() {
  // Extend the replicator role permissions as needed.
  $replicator = Role::load('replicator');
  $replicator->grantPermission('restful post contentpool_client:trigger_pull');
  $replicator->save();

  // Add vuejs settings.
  \Drupal::configFactory()->getEditable('vuejs.settings')
    ->set('libraries.vue.installation', 'cdnjs')
    ->set('libraries.vue.version', '2.5.17')
    ->save();
  // Configure custom entity edit redirect querystring.
  \Drupal::configFactory()->getEditable('entity_edit_redirect.settings')
    ->set('destination_querystring', 'trusted_destination')
    ->save();
}

/**
 * Add vuejs settings.
 */
function contentpool_client_update_8001() {
  \Drupal::configFactory()->getEditable('vuejs.settings')
    ->set('libraries.vue.installation', 'cdnjs')
    ->set('libraries.vue.version', '2.5.17')
    ->save();
}
