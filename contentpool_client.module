<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\relaxed\Entity\RemoteInterface;
use GuzzleHttp\Client;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function contentpool_client_form_remote_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\relaxed\Entity\RemoteInterface $remote */
  $remote = $form_state->getFormObject()->getEntity();

  $form['actions']['submit']['#submit'] = array_merge(['contentpool_client_form_remote_edit_form_submit'], $form['actions']['submit']['#submit']);

  $form['contentpool_client_settings'] = [
    '#type' => 'details',
    '#title' => t('Contentpool client settings'),
    '#open' => TRUE,
  ];

  $form['contentpool_client_settings']['is_contentpool'] = [
    '#type' => 'checkbox',
    '#title' => t('Is contentpool'),
    '#description' => t('Whether the remote site is an instance of the contentpool distribution.'),
    '#default_value' => $remote->getThirdPartySetting('contentpool_client', 'is_contentpool', 0),
  ];

  $form['contentpool_client_settings']['autopull_interval'] = [
    '#type' => 'select',
    '#title' => t('Automatic pull interval via cron'),
    '#description' => t('If set to "Never" the automatic pull has to be triggered manually via the provided drush command. Automatic pulls are triggered by cron, thus your cron interval is the lower limit.'),
    '#default_value' => $remote->getThirdPartySetting('contentpool_client', 'autopull_interval', 3600),
    '#options' => [
      'never' => t('Never (manual)'),
      3600 => t('Hourly'),
      86400 => t('Daily'),
      604800 => t('Weekly'),
    ],
    '#states' => [
      'visible' => [
        ':input[name="autopull"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $filter_fields = [];
  $treeselect_filters = contentpool_client_get_treeselect_filters($remote);
  $current_filter = $remote->getThirdPartySetting('contentpool_client', 'filter', []);
  foreach ($treeselect_filters as $field => $filter) {
    $filter_field = 'filter-' . $field;
    $filter_fields[] = $filter_field;
    $form['contentpool_client_settings']['treeselect-' . $field] = $filter;
    $form['contentpool_client_settings'][$filter_field] = [
      '#type' => 'hidden',
      '#default_value' => isset($current_filter['node:article'][$field]) ? implode(",", $current_filter['node:article'][$field]) : '',
    ];
  }
  $form_state->set('contentpool_client.filter_fields', $filter_fields);
}

/**
 * Get options for the termreference filter.
 *
 * @param \Drupal\relaxed\Entity\RemoteInterface $remote
 *   Remote interface.
 *
 * @return string[]
 *   A list of render arrays which render treeselect filters.
 */
function contentpool_client_get_treeselect_filters(RemoteInterface $remote) {
  if (!$remote->getThirdPartySetting('contentpool_client', 'is_contentpool', 0)) {
    return [];
  }

  $termreference_fields = [];

  $url = (string) $remote->uri();
  // As the remote targets the relaxed endpoint we have to parse the url
  // to get the base host.
  $url_parts = parse_url($url);
  $auth = [];
  if (isset($url_parts['user']) && isset($url_parts['pass'])) {
    $auth[] = $url_parts['user'];
    $auth[] = $url_parts['pass'];
  }
  $base_url = $url_parts['scheme'] . '://' . $url_parts['host'];

  try {
    $response = (new Client())->get($base_url . '/api/contentpool-term-reference-fields?entity_type=node&bundle=article', [
      'auth' => $auth,
    ]);
    if ($response->getStatusCode() == 200) {
      $termreference_fields = json_decode($response->getBody()->getContents(), TRUE);
    }
  }
  catch (\Exception $e) {
    watchdog_exception('contentpool_client', $e);
  }

  if (empty($termreference_fields)) {
    return [];
  }

  $treeselect_filters = [];
  $current_filter = $remote->getThirdPartySetting('contentpool_client', 'filter', []);
  foreach ($termreference_fields as $field => $field_data) {
    $renderable = [
      '#theme' => 'treeselect_filter',
      '#field' => $field,
      '#label' => $field_data['label'],
      '#description' => t('Term reference filter: only sync content with selected %term.', ['%term' => $field_data['label']]),
      '#attached' => [
        'library' => [
          'contentpool_client/treeselect_filter',
        ],
        'drupalSettings' => [
          'contentpoolClient' => [
            'filterData' => [
              $field => [
                'value' => isset($current_filter['node:article'][$field]) ? $current_filter['node:article'][$field] : NULL,
                'options' => contentpool_client_map_treeselect_options($field_data['terms']),
              ],
            ],
          ],
        ],
      ],
    ];

    $treeselect_filters[$field] = [
      '#type' => 'markup',
      '#markup' => \Drupal::service('renderer')->render($renderable),
    ];
  }

  return $treeselect_filters;
}

/**
 * Generate treeselect options array from the terms of the reference field.
 *
 * @param array $data
 *   API result data of a reference field.
 *
 * @return array
 *   Data array which is understood by the treeselect filter plugin.
 */
function contentpool_client_map_treeselect_options(array $data) {
  $options = [];
  foreach ($data as $item) {
    $option = [
      'id' => $item['id'],
      'label' => $item['label'],
    ];
    if (!empty($item['children'])) {
      $option['children'] = contentpool_client_map_treeselect_options($item['children']);
    }
    $options[] = $option;
  }
  return $options;
}

/**
 * Submit function to save third party settings.
 *
 * @param array $form
 *   The form object.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function contentpool_client_form_remote_edit_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\relaxed\Entity\RemoteInterface $remote */
  $remote = $form_state->getFormObject()->getEntity();

  $filter = [];
  foreach ((array) $form_state->get('contentpool_client.filter_fields') as $form_field) {
    list(, $field) = explode("-", $form_field);
    $value = $form_state->getValue($form_field);
    if (!empty($value)) {
      $filter['node:article'][$field] = array_map('trim', explode(",", $value));
    }
  }

  $remote->setThirdPartySetting('contentpool_client', 'is_contentpool', $form_state->getValue('is_contentpool'));
  $remote->setThirdPartySetting('contentpool_client', 'autopull_interval', $form_state->getValue('autopull_interval'));
  $remote->setThirdPartySetting('contentpool_client', 'filter', $filter);
}

/**
 * Implements hook_cron().
 */
function contentpool_client_cron() {
  $remote_pull_manager = \Drupal::service('contentpool_client.remote_pull_manager');
  $autopull_count = $remote_pull_manager->checkAndDoAutopulls();

  if ($autopull_count) {
    \Drupal::logger('contentpool client')->info('Autopull for @count remotes triggered.', ['@count' => $autopull_count]);
  }
  else {
    \Drupal::logger('contentpool client')->info('No autopulls triggered.');
  }
}

/**
 * Implements hook_theme().
 */
function contentpool_client_theme($existing, $type, $theme, $path) {
  return [
    'treeselect_filter' => [
      'variables' => [
        'field' => '',
        'label' => '',
        'description' => '',
      ],
    ],
  ];
}
